// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated from a template.
// 
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Generated on 2018-10-02T14:23:14, by ESR Version 1.82.0.0 using ESR Database SWS_EA_ESR_Cloud_Prod
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml;
using System.Linq;
using System.Collections.Generic;
using DataContracts;
using System.Text.RegularExpressions;

namespace Ato.EN.IntegrationServices.CodeGenerationPAYEVNTEMP
{

    public partial class PAYEVNTEMP2018ValidatorUpdate
    {
        /// <summary>
        /// The max parameter name length is restricted by the SBR1 and SBR2 schemas - the lowest common denominator of SBR 1 is used as the default
        /// </summary>
        private int _maxParameterNameLength;

        /// <summary>
        /// The max parameter value length is restricted by the SBR1 and SBR2 schemas
        /// </summary>
        private int _maxParameterValueLength;

        /// <summary>
        /// The SBR1 and ebms3 schemas do not allow parameter names or values to be the empty string
        /// </summary>
        private string _emptyParameterValue;
        public ProcessMessageSeverity MaximumSeverity { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PAYEVNTEMP2018ValidatorUpdate" /> class.
        /// </summary>
        /// <param name="maxParameterNameLength">Maximum length of the parameter name.</param>
        /// <param name="maxParameterValueLength">Maximum length of the parameter value.</param>
        /// <param name="emptyParameterValue">This value will be used in place of any parameter values that result in a null or empty value.</param>
        public PAYEVNTEMP2018ValidatorUpdate(int maxParameterNameLength = 20, int maxParameterValueLength = 4096, string emptyParameterValue = "EMPTY")
        {
            _maxParameterNameLength = maxParameterNameLength;
            _maxParameterValueLength = maxParameterValueLength;
            _emptyParameterValue = emptyParameterValue;
        }

        #region Functions
        private static IEnumerable<string> Union(IEnumerable<string> list1, IEnumerable<string> list2)
        {
            IEnumerable<string> response;

            if (list1 == null && list2 == null)
            {
                response = null;
            }
            else if (list1 == null)
            {
                response = list2.Distinct();
            }
            else if (list2 == null)
            {
                response = list1.Distinct();
            }
            else
            {
                response = list1.Union(list2);
            }

            return response;
        }

        private static bool IsMatch(int? field, string expression, RegexOptions options = RegexOptions.None)
        {
            if (field == null)
                return false;
            else
                return Regex.IsMatch(Convert.ToString(field.Value), expression, options);
        }

        private static bool IsMatch(string field, string expression, RegexOptions options = RegexOptions.None)
        {
            if (field == null)
                return false;
            else
                return Regex.IsMatch(field, expression, options);
        }

        // This is just context and tuple counts where they are integer values - easier that changing the parsing logic to just return the value
        private static int Count(int count)
        {
            return count;
        }


        private static int Count<T>(IEnumerable<T> values)
        {
            return values == null ? 0 : values.Where(f => f != null).Count();
        }


        private static int Count<T>(ICollection<T> values)
        {
            return values == null ? 0 : values.Where(f => f != null).Count();
        }


        private static bool exists(bool value)
        {
            return value;
        }

        private static string GetValueOrEmpty(bool? val)
        {
            return (val.HasValue) ? val.ToString().ToLower() : string.Empty;
        }

        private static string GetValueOrEmpty(DateTime? val)
        {
            return (val.HasValue) ? val.ToString() : string.Empty;
        }

        private static string GetValueOrEmpty(string val)
        {
            return !string.IsNullOrWhiteSpace(val) ? val : string.Empty;
        }

        private static string GetValueOrEmpty(decimal? val)
        {
            return (val.HasValue) ? val.ToString() : string.Empty;
        }

        private static string GetValueOrEmpty(int? val)
        {
            return (val.HasValue) ? val.ToString() : string.Empty;
        }

        /// <summary>
        /// Get string value between [first] a and [last] b.
        /// </summary>
        public static string Between(string value, string a, string b)
        {
            int posA = value.IndexOf(a);
            int posB = value.LastIndexOf(b);
            if (posA == -1)
            {
                return "";
            }
            if (posB == -1)
            {
                return "";
            }
            int adjustedPosA = posA + a.Length;
            if (adjustedPosA >= posB)
            {
                return "";
            }
            return value.Substring(adjustedPosA, posB - adjustedPosA);
        }

        /// <summary>
        /// Get string value after [first] a.
        /// </summary>
        public static string Before(string value, string a)
        {
            int posA = value.IndexOf(a);
            if (posA == -1)
            {
                return "";
            }
            return value.Substring(0, posA);
        }

        /// <summary>
        /// Get string value after [last] a.
        /// </summary>
        public static string After(string value, string a)
        {
            int posA = value.LastIndexOf(a);
            if (posA == -1)
            {
                return "";
            }
            int adjustedPosA = posA + a.Length;
            if (adjustedPosA >= value.Length)
            {
                return "";
            }
            return value.Substring(adjustedPosA);
        }

        private static int Length(object field)
        {
            if (field == null)
                return 0;
            else
                return field.ToString().Trim().Length;
        }

        private static bool NotSameValues(IEnumerable<object> nodes)
        {
            if (nodes == null)
                return false;

            object[] nodesArray = nodes.Cast<object>().ToArray();
            return NotSameValues(nodesArray);
        }

        private static bool NotSameValues(params object[] nodes)
        {
            if (nodes == null)
                return false;

            return ((from x in nodes select x).Distinct().Count() == nodes.Count());
        }

        private static bool HasDuplicateValues(IEnumerable<object> nodes)
        {
            if (nodes == null)
                return false;

            object[] nodesArray = nodes.Cast<object>().ToArray();
            return HasDuplicateValues(nodesArray);
        }

        private static bool HasDuplicateValues(params object[] nodes)
        {
            if (nodes == null)
                return false;

            nodes = nodes.Where(x => x != null).ToArray();
            return !((from x in nodes select x).Distinct().Count() == nodes.Count());

        }

        private int DuplicateValueIndex(IEnumerable<object> values)
        {
            int response = 0;
            var hashset = new HashSet<object>();
            foreach (var value in values)
            {
                if (!hashset.Add(value))
                {
                    return response;
                }
                response++;
            }
            return response;
        }

        private int DuplicateValueIndex<T>(IEnumerable<T?> values) where T : struct
        {
            int response = 0;
            var hashset = new HashSet<T?>();
            foreach (var value in values)
            {
                if (!hashset.Add(value))
                {
                    return response;
                }
                response++;
            }
            return response;
        }

        private static bool IsDate(object value)
        {
            DateTime dateValue;
            return (value != null && DateTime.TryParse(value.ToString(), out dateValue));
        }

        public DateTime AsDate(string dateAsString)
        {
            DateTime response = DateTime.MinValue;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
            {
                response = date;
            }

            return response;
        }

        public DateTime Date(DateTime? datetime)
        {
            return datetime.GetValueOrDefault().Date;
        }

        //The logic in After function expects "---" for day and "--" for month. 
        //Since hyphen was missing the date always returned null
        public DateTime? ConvertToDate(int day, int month, int year)
        {
            return ConvertToDate(day == 0 ? null : "---" + day.ToString(), month == 0 ? null : "--" + month.ToString(), year == 0 ? null : year.ToString());
        }

        public DateTime? ConvertToDate(string day, string month, string year)
        {
            DateTime? response;
            DateTime result;

            if (year == null || month == null || day == null)
            {
                return null;
            }
            string dateAsString = year + "-" + After(month, "--") + "-" + After(day, "---");
            if (DateTime.TryParse(dateAsString, out result))
            {
                response = result;
            }
            else
            {
                response = null;
            }
            return response;
        }


        public DateTime? ConvertToDate(string day, string month, int year)
        {
            DateTime? response;
            DateTime result;

            if (year == 0 || month == null || day == null)
            {
                return null;
            }
            string dateAsString = year.ToString() + "-" + After(month, "--") + "-" + After(day, "---");
            if (DateTime.TryParse(dateAsString, out result))
            {
                response = result;
            }
            else
            {
                response = null;
            }
            return response;
        }


        private static int Day(string dateAsString)
        {
            int response = 0;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
            {
                response = date.Day;
            }

            return response;
        }


        private static int Day(DateTime? date)
        {
            if (date == null)
                return 0;
            else
                return date.Value.Day;

        }


        private static string Month(string dateAsString)
        {
            string response = null;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
            {
                response = date.ToString("MMMM");
            }
            else
            {
                return "NotAMonth";
            }

            return response;
        }

        private static string Month(DateTime? date)
        {
            if (date == null)
                return "NotAMonth";
            else
                return date.Value.ToString("MMMM");
        }


        private static int MonthAsInt(string dateAsString)
        {
            int response = 0;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
            {
                response = date.Month;
            }

            return response;
        }

        private static int MonthAsInt(DateTime? date)
        {
            if (date == null)
            {
                return 0;
            }
            return date.Value.Month;
        }


        private static int Year(string dateAsString)
        {
            int response = 0;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
            {
                response = date.Year;
            }

            return response;
        }

        private static int Year(DateTime? date)
        {
            if (date == null)
                return 0;
            else
                return date.Value.Year;
        }


        private static int CurrentFinancialYear()
        {
            return DateToFinancialYear(DateTime.Now, 7);
        }

        private static int FinancialYear(string dateAsString)
        {
            return DateToFinancialYear(dateAsString, 7);
        }

        private static int FinancialYear(DateTime? date)
        {
            return DateToFinancialYear(date, 7);
        }

        private static int DateToFinancialYear(string dateAsString, int startingMonth)
        {
            int response = 0;
            DateTime date;
            if (DateTime.TryParse(dateAsString, out date))
            {
                response = DateToFinancialYear(date, startingMonth);
            }

            return response;
        }
        private static int DateToFinancialYear(DateTime? date, int startingMonth)
        {
            int response;
            if (date == null)
            {
                response = 0;
            }
            else
            {
                int year = date.Value.Year;
                int month = date.Value.Month;

                if (startingMonth > month)
                    response = year;
                else
                    response = year + 1;
            }
            return response;
        }


        private static int FBTYear(string dateAsString)
        {
            int response = 0;
            DateTime date;

            if (DateTime.TryParse(dateAsString, out date))
                response = FBTYear(date);
            return response;
        }

        private static int FBTYear(DateTime? date)
        {
            if (date == null)
            {
                return 0;
            }
            else
            {
                if (date.Value.Month > 3)
                    return date.Value.Year + 1;
                else
                    return date.Value.Year;
            }
        }

        private static DateTime? AddMonthsToDate(DateTime? dateTime, int months)
        {
            return dateTime == null ? null : (DateTime?)dateTime.Value.AddMonths(months);
        }

        private static bool IsNumeric(object value)
        {
            decimal numbervalue;
            return (value != null && decimal.TryParse(value.ToString(), out numbervalue));
        }

        private static bool NotMonetary(decimal? field, string sign, int digits, int decimals)
        {
            if (field == null)
            {
                return false;
            }
            else
            {
                string signExpression;
                string decimalExpression;
                int digitsToUse = digits - decimals;

                if (sign == "U")
                    signExpression = "^";
                else
                    signExpression = "^-?";

                if (decimals > 0)
                    decimalExpression = @"(\.\d{1," + decimals + "})?$";
                else
                    decimalExpression = @"$";

                return !(Regex.IsMatch(field.Value.ToString("0.#########################"), signExpression + @"\d{1," + digitsToUse + "}" + decimalExpression));
            }
        }

        private static bool NotNumeric(decimal? field, string sign, int digits, int decimals)
        {
            if (field == null)
            {
                return false;
            }
            else
            {
                string signExpression;
                string decimalExpression;
                int digitsToUse = digits - decimals;

                if (sign == "U")
                    signExpression = "^";
                else
                    signExpression = "^-?";

                if (decimals > 0)
                    decimalExpression = @"(\.\d{1," + decimals + "})?$";
                else
                    decimalExpression = @"$";

                return !(Regex.IsMatch(field.Value.ToString("0.#########################"), signExpression + @"\d{1," + digitsToUse + "}" + decimalExpression));
            }
        }

        private static bool NotNumeric(int? field, string sign, int digits, int decimals = 0)
        {
            if (field == null)
            {
                return false;
            }
            else
            {
                string signExpression;

                if (sign == "U")
                    signExpression = "^";
                else
                    signExpression = "^-?";

                return !(Regex.IsMatch(field.Value.ToString(), signExpression + @"\d{1," + digits + "}$"));
            }
        }

        private static bool NotNumeric(long? field, string sign, int digits, int decimals = 0)
        {
            if (field == null)
            {
                return false;
            }
            else
            {
                string signExpression;

                if (sign == "U")
                    signExpression = "^";
                else
                    signExpression = "^-?";

                return !(Regex.IsMatch(field.Value.ToString(), signExpression + @"\d{1," + digits + "}$"));
            }
        }


        private static bool OutsideRange(decimal field, decimal expression, int range)
        {
            bool response;

            response = (field < (expression - range)) || (field > (expression + range));

            return response;
        }


        private static bool FailsUSIAlgorithm(string usi, string abn)
        {
            bool response = true;
            if (usi == null || abn == null)
            {
                response = false;
            }
            else
            {
                usi = usi.Trim();
                abn = abn.Trim();
                if (usi.Length == 14)
                {
                    int numeric;
                    if (usi.Substring(0, 11) == abn && int.TryParse(usi.Substring(11, 3), out numeric))
                        response = false;

                }
                else if (usi.Length == 9)
                {

                    if (Regex.IsMatch(usi, @"^([a-zA-Z]{3}\d{4}[a-zA-Z]{2})$"))
                        response = false;
                }
            }
            return response;
        }

        private static bool FailsTANAlgorithm(string tan)
        {
            bool response;
            decimal decimalTan;

            if (tan == null)
                return false;

            tan = tan.Trim();

            if (!decimal.TryParse(tan, out decimalTan))
                return true;

            if (tan.Length != 8)
                return true;

            decimal tanSum =
                7 * int.Parse(tan.Substring(0, 1)) +
                9 * int.Parse(tan.Substring(1, 1)) +
                8 * int.Parse(tan.Substring(2, 1)) +
                4 * int.Parse(tan.Substring(3, 1)) +
                6 * int.Parse(tan.Substring(4, 1)) +
                3 * int.Parse(tan.Substring(5, 1)) +
                5 * int.Parse(tan.Substring(6, 1)) +
                1 * int.Parse(tan.Substring(7, 1));

            if ((tanSum % 11) == 0)
                response = false;
            else
                response = true;

            return response;
        }


        private static bool FailsABNAlgorithm(string abn)
        {
            bool response;
            decimal decimalAbn;

            if (abn == null)
                return false;

            abn = abn.Trim();

            if (!decimal.TryParse(abn, out decimalAbn))
                return true;

            if (abn.Length != 11)
                return true;

            decimal abnSum =
                10 * (int.Parse(abn.Substring(0, 1)) - 1) +
                1 * int.Parse(abn.Substring(1, 1)) +
                3 * int.Parse(abn.Substring(2, 1)) +
                5 * int.Parse(abn.Substring(3, 1)) +
                7 * int.Parse(abn.Substring(4, 1)) +
                9 * int.Parse(abn.Substring(5, 1)) +
                11 * int.Parse(abn.Substring(6, 1)) +
                13 * int.Parse(abn.Substring(7, 1)) +
                15 * int.Parse(abn.Substring(8, 1)) +
                17 * int.Parse(abn.Substring(9, 1)) +
                19 * int.Parse(abn.Substring(10, 1));

            if ((abnSum % 89) == 0)
                response = false;
            else
                response = true;

            return response;
        }
        private static bool FailsACNAlgorithm(string acn)
        {
            bool response;
            decimal decimalAbn;
            if (acn == null)
                return false;

            acn = acn.Trim();

            if (!decimal.TryParse(acn, out decimalAbn))
                return true;

            if (acn.Length != 9)
                return true;

            decimal abnSum =
                8 * int.Parse(acn.Substring(0, 1)) +
                7 * int.Parse(acn.Substring(1, 1)) +
                6 * int.Parse(acn.Substring(2, 1)) +
                5 * int.Parse(acn.Substring(3, 1)) +
                4 * int.Parse(acn.Substring(4, 1)) +
                3 * int.Parse(acn.Substring(5, 1)) +
                2 * int.Parse(acn.Substring(6, 1)) +
                1 * int.Parse(acn.Substring(7, 1));

            decimal checkDigit = int.Parse(acn.Substring(8, 1));
            decimal acnRemainder = abnSum % 10;

            if (((10 - acnRemainder) % 10) == checkDigit)
                response = false;
            else
                response = true;

            return response;
        }


        private static bool FailsTFNAlgorithm(string tfn)
        {
            bool response;
            decimal decimalTfn;

            if (tfn == null)
                return false;

            tfn = tfn.Trim();
            tfn = Regex.Replace(tfn, "^0+", "");

            if (!decimal.TryParse(tfn, out decimalTfn))
                return true;

            if (tfn.Length < 8)
                return true;


            decimal tfn1To7Sum =
                1 * int.Parse(tfn.Substring(0, 1)) +
                4 * int.Parse(tfn.Substring(1, 1)) +
                3 * int.Parse(tfn.Substring(2, 1)) +
                7 * int.Parse(tfn.Substring(3, 1)) +
                5 * int.Parse(tfn.Substring(4, 1)) +
                8 * int.Parse(tfn.Substring(5, 1)) +
                6 * int.Parse(tfn.Substring(6, 1));

            decimal tfn8 = 9 * int.Parse(tfn.Substring(7, 1));

            if (tfn.Length == 8)
            {
                decimal tFNLg8WSum9 = 10 * int.Parse(tfn.Substring(7, 1));
                decimal tFNLg8WSum = tfn1To7Sum + tFNLg8WSum9;

                if ((tFNLg8WSum % 11) == 0)
                    response = false;
                else
                    response = true;
            }
            else if (tfn.Length == 9)
            {
                decimal tfn9 = 10 * int.Parse(tfn.Substring(8, 1));
                decimal tFNLg9WSum = tfn1To7Sum + tfn8 + tfn9;

                if ((tFNLg9WSum % 11) == 0)
                    response = false;
                else
                    response = true;
            }
            else
            {
                response = true;
            }

            return response;
        }


        private static decimal ConditionalValue(bool expression, decimal? trueVal, decimal? falseVal)
        {
            return expression ? trueVal.GetValueOrDefault() : falseVal.GetValueOrDefault();
        }

        private static decimal AsNumeric(string value)
        {
            decimal numberValue;
            decimal.TryParse(value, out numberValue);
            return numberValue;
        }

        private static bool RegexMatch(int? field, string expression, string flags = "")
        {
            return IsMatch(field, expression, GetRegexOption(flags));
        }

        private static bool RegexMatch(string field, string expression, string flags = "")
        {
            return IsMatch(field, expression, GetRegexOption(flags));
        }

        private static RegexOptions GetRegexOption(string flags)
        {
            RegexOptions options = RegexOptions.None;

            char[] characters = flags.ToCharArray();

            foreach (char character in characters)
            {
                switch (character)
                {
                    case 'i':
                        options = options | RegexOptions.IgnoreCase;
                        break;
                    case 'm':
                        options = options | RegexOptions.Multiline;
                        break;
                    case 's':
                        options = options | RegexOptions.Singleline;
                        break;
                    case 'n':
                        options = options | RegexOptions.ExplicitCapture;
                        break;
                    case 'x':
                        options = options | RegexOptions.IgnorePatternWhitespace;
                        break;
                }
            }

            return options;
        }

        /// <summary>
        /// Returns an occurrence index as [occurrenceIndex] of occurrenceIndex > 0, otherwise the empty string
        /// </summary>
        /// <param name="occurrenceIndex">Index of the occurrence.</param>
        /// <returns>Occurrence in XPath [#] format</returns>
        public string OccurrenceIndex(int occurrenceIndex)
        {
            return occurrenceIndex > 0 ? "[" + occurrenceIndex + "]" : "";
        }

        #endregion // Functions

        public PAYEVNTEMP2018 ConsumedReport { get; private set; }

        private static Dictionary<string, ProcessMessageDocument> _processMessageDocuments = new Dictionary<string, ProcessMessageDocument>();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public List<ProcessMessageDocument> ValidateReport(PAYEVNTEMP2018 report)
        {

            List<ProcessMessageDocument> response = new List<ProcessMessageDocument>();
            ProcessMessageDocument processMessage;
            ProcessMessageParameter parameter;
            bool assertion;

            this.ConsumedReport = report;

            // ------------------------------------------------------------------------------
            // Validations are now done in code.
            // This version supports full validation of a report - for those rules that have successfully parsed and could be generated.
            // Generated Validations include:
            //   - Validation logic in C#.
            //   - Production of errors in EBMS, SBR and SWS format.
            // 
            // The generation at this stage does not support the following - and has to be completed manually (later versions of the generation will do this for you)
            //   - Business Rules that did not parse.  The ESR team will help support you where this happens as an effort is being made to rectify these
            //   - You will get TODO tasks for those that the parser could not cope with
            // ------------------------------------------------------------------------------


            #region Repeating report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_AllowanceCollection
            if (report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_AllowanceCollection != null)
            {
                int itemIndex3 = 0;
                foreach (PAYEVNTEMP2018.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_Allowance allowance in report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_AllowanceCollection)
                {
                    itemIndex3++;

                    #region VR.ATO.PAYEVNTEMP.000012

                    /*  VR.ATO.PAYEVNTEMP.000012
                    Other Allowance Type must be entered when Allowance Type "Other" selected
    
                    Legacy Rule Format:
                    (^PAYEVNTEMP7 = "Other" AND ^PAYEVNTEMP8 = NULLORBLANK)
        
                    Technical Business Rule Format:
                    ^PAYEVNTEMP7 = 'Other' AND ^PAYEVNTEMP8 = BLANK
            
                    Data Elements:
            
                    ^PAYEVNTEMP8 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:Allowance:IncomeTax.OtherAllowanceType.Description
            
                    ^PAYEVNTEMP7 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:Allowance:Remuneration.AllowanceType.Code
                    */
                    assertion = (allowance.PAYEVNTEMP7 == @"Other" && string.IsNullOrWhiteSpace(allowance.PAYEVNTEMP8) == true);
                    if (assertion)
                    {
                        processMessage = new ProcessMessageDocument()
                        {
                            Code = "CMN.ATO.PAYEVNTEMP.000012",
                            Severity = ProcessMessageSeverity.Error,
                            Description = @"Other Allowance Type must be entered when Allowance Type of ""Other"" is selected",
                            Location = "/tns:PAYEVNTEMP/tns:Payee/tns:RemunerationIncomeTaxPayAsYouGoWithholding/tns:AllowanceCollection/tns:Allowance" + OccurrenceIndex(allowance.OccurrenceIndex) + "/tns:OtherAllowanceTypeDe",
                            Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000012" } },
                        };
                        processMessage.Parameters.Add(new ProcessMessageParameter
                        { Name = "PAYEVNTEMP7", Value = allowance.PAYEVNTEMP7 });

                        processMessage.Parameters.Add(new ProcessMessageParameter
                        { Name = "PAYEVNTEMP8", Value = GetValueOrEmpty(allowance.PAYEVNTEMP8) });

                        response.Add(processMessage);
                    }
                    #endregion // VR.ATO.PAYEVNTEMP.000012
                }
            }

            #endregion // Foreach loop

            #region VR.ATO.PAYEVNTEMP.000019

            /*  VR.ATO.PAYEVNTEMP.000019
            The Tax File Number (TFN) has failed the algorithm check.
    
            Legacy Rule Format:
            (^PAYEVNTEMP13 <> NULL AND NotInSet(^PAYEVNTEMP13,'"000000000","111111111","333333333","444444444","987654321"') AND FailsTFNAlgorithm(^PAYEVNTEMP13))

            Technical Business Rule Format:
            (^PAYEVNTEMP13 <> NULL AND NotInSet(^PAYEVNTEMP13,'"000000000","111111111","333333333","444444444","987654321"') AND FailsTFNAlgorithm(^PAYEVNTEMP13))
    
            Data Elements:
    
            ^PAYEVNTEMP13 = PAYEVNTEMP:Payee:Identifiers:Identifiers.TaxFileNumber.Identifier
            */
            assertion = (report.PAYEVNTEMP13 != null && !(IsMatch(report.PAYEVNTEMP13, @"^(000000000|111111111|333333333|444444444|987654321)$", RegexOptions.IgnoreCase)) && FailsTFNAlgorithm(report.PAYEVNTEMP13));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.402043",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"TFN must be a valid TFN",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Identifiers/tns:TaxFileNumberId",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000019" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP13", Value = GetValueOrEmpty(report.PAYEVNTEMP13) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000019

            #region VR.ATO.PAYEVNTEMP.000033

            /*  VR.ATO.PAYEVNTEMP.000033
            When the address is in Australia or blank, the State / Territory must be supplied.
    
            Legacy Rule Format:
            (^PAYEVNTEMP27 = NULL OR ^PAYEVNTEMP27 = "au") AND (^PAYEVNTEMP24 = NULL)

            Technical Business Rule Format:
            (^PAYEVNTEMP27 = NULL OR ^PAYEVNTEMP27 = 'au') AND (^PAYEVNTEMP24 = NULL)
    
            Data Elements:
    
            ^PAYEVNTEMP24 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.StateOrTerritory.Code
    
            ^PAYEVNTEMP27 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Country.Code
            */
            assertion = ((report.PAYEVNTEMP27 == null || report.PAYEVNTEMP27 == @"au") && report.PAYEVNTEMP24 == null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.300006",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"For an Australian address, the state or territory must be provided",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:StateOrTerritoryC",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000033" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP27", Value = GetValueOrEmpty(report.PAYEVNTEMP27) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP24", Value = GetValueOrEmpty(report.PAYEVNTEMP24) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000033

            #region VR.ATO.PAYEVNTEMP.000034

            /*  VR.ATO.PAYEVNTEMP.000034
            The Postcode must be in the range of '0200-9999'.
    
            Legacy Rule Format:
            (^PAYEVNTEMP25 <> NULL AND (AsNumeric(^PAYEVNTEMP25) < 200 OR AsNumeric(^PAYEVNTEMP25) > 9999))

            Technical Business Rule Format:
            (^PAYEVNTEMP25 <> NULL AND (AsNumeric(^PAYEVNTEMP25) < 200 OR AsNumeric(^PAYEVNTEMP25) > 9999))
    
            Data Elements:
    
            ^PAYEVNTEMP25 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Postcode.Text
            */
            assertion = (report.PAYEVNTEMP25 != null && (AsNumeric(report.PAYEVNTEMP25) < 200 || AsNumeric(report.PAYEVNTEMP25) > 9999));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000034",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"A valid postcode must be supplied",
                    LongDescription = @"When the address is within Australia, the Postcode must be in the range of '0200-9999'",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:PostcodeT",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000034" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP25", Value = GetValueOrEmpty(report.PAYEVNTEMP25) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000034

            #region VR.ATO.PAYEVNTEMP.000035

            /*  VR.ATO.PAYEVNTEMP.000035
            When the address is overseas, the Postcode must be blank.
    
            Legacy Rule Format:
            (^PAYEVNTEMP27 <> NULL AND ^PAYEVNTEMP27 <> "au") AND (^PAYEVNTEMP25 <> NULL)

            Technical Business Rule Format:
            (^PAYEVNTEMP27 <> NULL AND ^PAYEVNTEMP27 <> 'au') AND (^PAYEVNTEMP25 <> NULL)
    
            Data Elements:
    
            ^PAYEVNTEMP25 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Postcode.Text
    
            ^PAYEVNTEMP27 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Country.Code
            */
            assertion = (report.PAYEVNTEMP27 != null && report.PAYEVNTEMP27 != @"au" && report.PAYEVNTEMP25 != null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000035",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"This field must be left blank",
                    LongDescription = @"When the address is overseas, the Postcode must be blank",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:PostcodeT",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000035" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP27", Value = GetValueOrEmpty(report.PAYEVNTEMP27) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP25", Value = GetValueOrEmpty(report.PAYEVNTEMP25) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000035

            #region VR.ATO.PAYEVNTEMP.000126

            /*  VR.ATO.PAYEVNTEMP.000126
            The Contractor Australian Business Number (ABN) has failed the algorithm check.
    
            Legacy Rule Format:
            (^PAYEVNTEMP91 <> NULL AND FailsABNAlgorithm(^PAYEVNTEMP91))

            Technical Business Rule Format:
            (^PAYEVNTEMP91 <> NULL AND FailsABNAlgorithm(^PAYEVNTEMP91))
    
            Data Elements:
    
            ^PAYEVNTEMP91 = PAYEVNTEMP:Payee:Identifiers:Identifiers.AustralianBusinessNumber.Identifier
            */
            assertion = (report.PAYEVNTEMP91 != null && FailsABNAlgorithm(report.PAYEVNTEMP91));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.434223",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"ABN is invalid.",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Identifiers/tns:AustralianBusinessNumberId",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000126" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP91", Value = GetValueOrEmpty(report.PAYEVNTEMP91) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000126

            #region VR.ATO.PAYEVNTEMP.000130

            /*  VR.ATO.PAYEVNTEMP.000130
            When the address is overseas, the State / Territory must be blank.
    
            Legacy Rule Format:
            (^PAYEVNTEMP27 <> NULL AND ^PAYEVNTEMP27 <> "au") AND (^PAYEVNTEMP24 <> NULL)

            Technical Business Rule Format:
            (^PAYEVNTEMP27 <> NULL AND ^PAYEVNTEMP27 <> 'au') AND (^PAYEVNTEMP24 <> NULL)
    
            Data Elements:
    
            ^PAYEVNTEMP24 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.StateOrTerritory.Code
    
            ^PAYEVNTEMP27 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Country.Code
            */
            assertion = (report.PAYEVNTEMP27 != null && report.PAYEVNTEMP27 != @"au" && report.PAYEVNTEMP24 != null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000130",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"This field must be left blank",
                    LongDescription = @"When the address is overseas, the State / Territory must be blank",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:StateOrTerritoryC",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000130" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP27", Value = GetValueOrEmpty(report.PAYEVNTEMP27) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP24", Value = GetValueOrEmpty(report.PAYEVNTEMP24) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000130

            #region VR.ATO.PAYEVNTEMP.000131

            /*  VR.ATO.PAYEVNTEMP.000131
            The payee contact email address must be a valid email.
    
            Legacy Rule Format:
            (^PAYEVNTEMP94 <> NULLORBLANK AND NOT IsValidEmail(^PAYEVNTEMP94))

            Technical Business Rule Format:
            (^PAYEVNTEMP94 <> BLANK AND NOT IsValidEmail(^PAYEVNTEMP94))
    
            Data Elements:
    
            ^PAYEVNTEMP94 = PAYEVNTEMP:Payee:ElectronicContact:ElectronicContact.ElectronicMail.Address.Text
            */
            assertion = (string.IsNullOrWhiteSpace(report.PAYEVNTEMP94) != true && !(IsMatch(report.PAYEVNTEMP94, @"^\S.*@.+\.\S+$")));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.500029",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Email Address contains invalid text",
                    LongDescription = @"A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * ( ) - _ = [ ] ; : ' "" , . ? / or a space character.",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:ElectronicContact/tns:ElectronicMailAddressT",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000131" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP94", Value = GetValueOrEmpty(report.PAYEVNTEMP94) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000131

            #region VR.ATO.PAYEVNTEMP.000154

            /*  VR.ATO.PAYEVNTEMP.000154
            When address is within Australia, the Postcode must be supplied.
    
            Legacy Rule Format:
            ((^PAYEVNTEMP27  = "au" OR ^PAYEVNTEMP27 = NULL) AND ^PAYEVNTEMP25 = NULL)

            Technical Business Rule Format:
            ((^PAYEVNTEMP27  = 'au' OR ^PAYEVNTEMP27 = NULL) AND ^PAYEVNTEMP25 = NULL)
    
            Data Elements:
    
            ^PAYEVNTEMP25 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Postcode.Text
    
            ^PAYEVNTEMP27 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Country.Code
            */
            assertion = ((report.PAYEVNTEMP27 == @"au" || report.PAYEVNTEMP27 == null) && report.PAYEVNTEMP25 == null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.000009",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Postcode is required for an Australian address",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:PostcodeT",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000154" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP27", Value = GetValueOrEmpty(report.PAYEVNTEMP27) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP25", Value = GetValueOrEmpty(report.PAYEVNTEMP25) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000154

            #region VR.ATO.PAYEVNTEMP.000166

            /*  VR.ATO.PAYEVNTEMP.000166
            Payee date of birth cannot be a future date.
    
            Legacy Rule Format:
            (^PAYEVNTEMP204 > Year(Today()) OR (^PAYEVNTEMP204 = Year(Today()) AND (^PAYEVNTEMP203 > MonthAsInt(Today()) OR (^PAYEVNTEMP203 = MonthAsInt(Today()) AND ^PAYEVNTEMP205 > Day(Today())))))

            Technical Business Rule Format:
            (^PAYEVNTEMP204 > Year(Today()) OR (^PAYEVNTEMP204 = Year(Today()) AND (^PAYEVNTEMP203 > MonthAsInt(Today()) OR (^PAYEVNTEMP203 = MonthAsInt(Today()) AND ^PAYEVNTEMP205 > Day(Today())))))
    
            Data Elements:
    
            ^PAYEVNTEMP204 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.Year
    
            ^PAYEVNTEMP203 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.Month
    
            ^PAYEVNTEMP205 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.DayofMonth
            */
            assertion = (report.PAYEVNTEMP204.GetValueOrDefault() > Year(DateTime.Now.Date) || report.PAYEVNTEMP204.GetValueOrDefault() == Year(DateTime.Now.Date) && (report.PAYEVNTEMP203.GetValueOrDefault() > MonthAsInt(DateTime.Now.Date) || report.PAYEVNTEMP203.GetValueOrDefault() == MonthAsInt(DateTime.Now.Date) && report.PAYEVNTEMP205.GetValueOrDefault() > Day(DateTime.Now.Date)));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000166",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Date of birth cannot be a future date",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:PersonDemographicDetails/tns:BirthY",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000166" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP204", Value = GetValueOrEmpty(report.PAYEVNTEMP204) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP203", Value = GetValueOrEmpty(report.PAYEVNTEMP203) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP205", Value = GetValueOrEmpty(report.PAYEVNTEMP205) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000166

            #region VR.ATO.PAYEVNTEMP.000167

            /*  VR.ATO.PAYEVNTEMP.000167
            Either the Payee TFN or Contractor ABN must be supplied
    
            Legacy Rule Format:
            (^PAYEVNTEMP13 = NULL AND ^PAYEVNTEMP91 = NULL)

            Technical Business Rule Format:
            ^PAYEVNTEMP13 = NULL AND ^PAYEVNTEMP91 = NULL
    
            Data Elements:
    
            ^PAYEVNTEMP13 = PAYEVNTEMP:Payee:Identifiers:Identifiers.TaxFileNumber.Identifier
    
            ^PAYEVNTEMP91 = PAYEVNTEMP:Payee:Identifiers:Identifiers.AustralianBusinessNumber.Identifier
            */
            assertion = (report.PAYEVNTEMP13 == null && report.PAYEVNTEMP91 == null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000167",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"You must provide either an ABN or a TFN",
                    LongDescription = @"Either the Payee TFN or Contractor ABN must be supplied",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Identifiers/tns:TaxFileNumberId",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000167" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP13", Value = GetValueOrEmpty(report.PAYEVNTEMP13) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP91", Value = GetValueOrEmpty(report.PAYEVNTEMP91) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000167

            #region VR.ATO.PAYEVNTEMP.000168

            /*  VR.ATO.PAYEVNTEMP.000168
            There cannot be more than one of the same Deduction Type in the collection.
    
            Legacy Rule Format:
            (HasDuplicateValues(^PAYEVNTEMP10))

            Technical Business Rule Format:
            (HasDuplicateValues(^PAYEVNTEMP10))
    
            Data Elements:
    
            ^PAYEVNTEMP10 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:Deduction:Remuneration.DeductionType.Code
            */
            assertion = HasDuplicateValues(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection == null ? null : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection.Select(f => f.PAYEVNTEMP10).Cast<object>().ToArray());
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000168",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Duplicate deduction types",
                    LongDescription = @"Deduction Type code has occurred more than once.  Delete the duplicate code or replace with an alternative code",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:RemunerationIncomeTaxPayAsYouGoWithholding/tns:DeductionCollection/tns:Deduction[" + report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection[DuplicateValueIndex(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection.Select(f => f.PAYEVNTEMP10))].OccurrenceIndex + "]/tns:TypeC",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000168" } },
                };
                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000168

            #region VR.ATO.PAYEVNTEMP.000171

            /*  VR.ATO.PAYEVNTEMP.000171
            Contractor ABN must be supplied if either Payee Voluntary Agreement Gross Payment or Payee Total Voluntary Agreement PAYGW Amount is greater than zero.
    
            Legacy Rule Format:
            ((^PAYEVNTEMP91 = NULL) AND (Count(^PAYEVNTEMP217) > 0 AND (^PAYEVNTEMP57 > 0 OR ^PAYEVNTEMP115 > 0)))

            Technical Business Rule Format:
            ((^PAYEVNTEMP91 = NULL) AND (Count(^PAYEVNTEMP217) > 0 AND (^PAYEVNTEMP57 > 0 OR ^PAYEVNTEMP115 > 0)))
    
            Data Elements:
    
            ^PAYEVNTEMP91 = PAYEVNTEMP:Payee:Identifiers:Identifiers.AustralianBusinessNumber.Identifier
    
            ^PAYEVNTEMP57 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement:Remuneration.VoluntaryAgreementGross.Amount
    
            ^PAYEVNTEMP115 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP217 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement
            */
            assertion = (report.PAYEVNTEMP91 == null && (Count(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_VoluntaryAgreementCollectionCount) > 0 && (report.PAYEVNTEMP57.GetValueOrDefault() > 0 || report.PAYEVNTEMP115.GetValueOrDefault() > 0)));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000171",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Contractor ABN must be supplied",
                    LongDescription = @"Contractor ABN must be supplied if either Payee Voluntary Agreement Gross Payment or Payee Total Voluntary Agreement PAYGW Amount is greater than zero",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Identifiers/tns:AustralianBusinessNumberId",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000171" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP91", Value = GetValueOrEmpty(report.PAYEVNTEMP91) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP57", Value = GetValueOrEmpty(report.PAYEVNTEMP57) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP115", Value = GetValueOrEmpty(report.PAYEVNTEMP115) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000171

            #region VR.ATO.PAYEVNTEMP.000172

            /*  VR.ATO.PAYEVNTEMP.000172
            There cannot be any occurrence with the same combination of ETP Code and Payee ETP Payment Date.
    
            Legacy Rule Format:
            (HasDuplicateValues(^PAYEVNTEMP34 + ^PAYEVNTEMP123))

            Technical Business Rule Format:
            (HasDuplicateValues(^PAYEVNTEMP34 + ^PAYEVNTEMP123))
    
            Data Elements:
    
            ^PAYEVNTEMP34 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:EmploymentTerminationPayment:IncomeTax.PayAsYouGoWithholding.EmploymentTerminationPaymentType.Code
    
            ^PAYEVNTEMP123 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:EmploymentTerminationPayment:PaymentRecord.PaymentEffective.Date
            */
            assertion = HasDuplicateValues(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection == null ? null : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection.Select(f => f.PAYEVNTEMP34 + f.PAYEVNTEMP123).Cast<object>().ToArray());
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000172",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Duplicate ETP codes and Payee ETP Payment Dates",
                    LongDescription = @"The combination of ETP code and Payee ETP Payment Date has occurred more than once.  Either replace ETP code or ETP Payment Date with alternative codes",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:RemunerationIncomeTaxPayAsYouGoWithholding/tns:EmploymentTerminationPaymentCollection/tns:EmploymentTerminationPayment[" + report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection[DuplicateValueIndex(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection.Select(f => f.PAYEVNTEMP34 + f.PAYEVNTEMP123))].OccurrenceIndex + "]/tns:TypeC",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000172" } },
                };
                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000172

            #region VR.ATO.PAYEVNTEMP.000174

            /*  VR.ATO.PAYEVNTEMP.000174
            Period End Date must equal the Period Start Date.
    
            Legacy Rule Format:
            (^PAYEVNTEMP29 <> ^PAYEVNTEMP30)

            Technical Business Rule Format:
            ^PAYEVNTEMP29 <> ^PAYEVNTEMP30
    
            Data Elements:
    
            ^PAYEVNTEMP30 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:PayrollPeriod:Period.End.Date
    
            ^PAYEVNTEMP29 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:PayrollPeriod:Period.Start.Date
            */
            assertion = (report.PAYEVNTEMP29.GetValueOrDefault() != report.PAYEVNTEMP30.GetValueOrDefault());
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000174",
                    Severity = ProcessMessageSeverity.Warning,
                    Description = @"The Period End Date must be the same as the Period Start Date",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:RemunerationIncomeTaxPayAsYouGoWithholding/tns:PayrollPeriod/tns:EndD",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000174" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP29", Value = GetValueOrEmpty(report.PAYEVNTEMP29) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP30", Value = GetValueOrEmpty(report.PAYEVNTEMP30) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000174

            #region VR.ATO.PAYEVNTEMP.000175

            /*  VR.ATO.PAYEVNTEMP.000175
            Onboarding information must not be provided.
    
            Legacy Rule Format:
            (Count(^PAYEVNTEMP232) > 0)

            Technical Business Rule Format:
            (Count(^PAYEVNTEMP232) > 0)
    
            Data Elements:
    
            ^PAYEVNTEMP232 = PAYEVNTEMP:Payee:Onboarding
            */
            assertion = (Count(report.Payee_OnboardingCollectionCount) > 0);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000175",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"The Onboarding tuple must not be present",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Onboarding",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000175" } },
                };
                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000175

            #region VR.ATO.PAYEVNTEMP.000176

            /*  VR.ATO.PAYEVNTEMP.000176
            Payee TFN must be supplied if at least one of the following amounts is provided in the Allowance Item or Deduction Item or Wage and Taxation Item excluding those in the Voluntary Agreement Payment Summary or if Reportable Employer Super contribution (RESC) is provided when Voluntary Agreement Payment Summary amounts are not provided.
    
            Legacy Rule Format:
            ((^PAYEVNTEMP13 = NULL) AND ((AnyOccurrence(^PAYEVNTEMP62, ^PAYEVNTEMP62 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP87, ^PAYEVNTEMP87 > 0) = TRUE) OR ((^PAYEVNTEMP111 > 0) AND ((Count(^PAYEVNTEMP217) = 0) OR (^PAYEVNTEMP57 = 0 AND ^PAYEVNTEMP115 = 0)))  OR (^PAYEVNTEMP52 > 0) OR (^PAYEVNTEMP54 > 0) OR (^PAYEVNTEMP55 > 0) OR (^PAYEVNTEMP56 > 0) OR (^PAYEVNTEMP125 > 0) OR (^PAYEVNTEMP126 > 0) OR (^PAYEVNTEMP122 > 0) OR (^PAYEVNTEMP116 > 0) OR (^PAYEVNTEMP120 > 0) OR (^PAYEVNTEMP132 > 0) OR (^PAYEVNTEMP113 > 0) OR (^PAYEVNTEMP200 > 0) OR (^PAYEVNTEMP201 > 0) OR (^PAYEVNTEMP47 > 0) OR (^PAYEVNTEMP60 > 0) OR (^PAYEVNTEMP130 > 0) OR (^PAYEVNTEMP49 > 0) OR (^PAYEVNTEMP48 > 0) OR (^PAYEVNTEMP114 > 0) OR (^PAYEVNTEMP237 > 0) OR (^PAYEVNTEMP112 > 0) OR (^PAYEVNTEMP119 > 0) OR (AnyOccurrence(^PAYEVNTEMP50, ^PAYEVNTEMP50 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP51, ^PAYEVNTEMP51 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP117, ^PAYEVNTEMP117 > 0) = TRUE)))

            Technical Business Rule Format:
            ((^PAYEVNTEMP13 = NULL) AND ((AnyOccurrence(^PAYEVNTEMP62, ^PAYEVNTEMP62 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP87, ^PAYEVNTEMP87 > 0) = TRUE) OR ((^PAYEVNTEMP111 > 0) AND ((Count(^PAYEVNTEMP217) = 0) OR (^PAYEVNTEMP57 = 0 AND ^PAYEVNTEMP115 = 0)))  OR (^PAYEVNTEMP52 > 0) OR (^PAYEVNTEMP54 > 0) OR (^PAYEVNTEMP55 > 0) OR (^PAYEVNTEMP56 > 0) OR (^PAYEVNTEMP125 > 0) OR (^PAYEVNTEMP126 > 0) OR (^PAYEVNTEMP122 > 0) OR (^PAYEVNTEMP116 > 0) OR (^PAYEVNTEMP120 > 0) OR (^PAYEVNTEMP132 > 0) OR (^PAYEVNTEMP113 > 0) OR (^PAYEVNTEMP200 > 0) OR (^PAYEVNTEMP201 > 0) OR (^PAYEVNTEMP47 > 0) OR (^PAYEVNTEMP60 > 0) OR (^PAYEVNTEMP130 > 0) OR (^PAYEVNTEMP49 > 0) OR (^PAYEVNTEMP48 > 0) OR (^PAYEVNTEMP114 > 0) OR (^PAYEVNTEMP237 > 0) OR (^PAYEVNTEMP112 > 0) OR (^PAYEVNTEMP119 > 0) OR (AnyOccurrence(^PAYEVNTEMP50, ^PAYEVNTEMP50 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP51, ^PAYEVNTEMP51 > 0) = TRUE) OR (AnyOccurrence(^PAYEVNTEMP117, ^PAYEVNTEMP117 > 0) = TRUE)))
    
            Data Elements:
    
            ^PAYEVNTEMP13 = PAYEVNTEMP:Payee:Identifiers:Identifiers.TaxFileNumber.Identifier
    
            ^PAYEVNTEMP47 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IndividualNonBusiness:Remuneration.IndividualNonBusinessGross.Amount
    
            ^PAYEVNTEMP48 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:LabourHireArrangementPayment:Remuneration.LabourHireArrangementPaymentGross.Amount
    
            ^PAYEVNTEMP49 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IndividualNonBusiness:Remuneration.IndividualNonBusinessExemptForeignEmploymentIncome.Amount
    
            ^PAYEVNTEMP50 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:EmploymentTerminationPayment:IncomeTax.Superannuation.TaxFreeComponent.Amount
    
            ^PAYEVNTEMP51 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:EmploymentTerminationPayment:IncomeTax.Superannuation.EmploymentTerminationTaxableComponentTotal.Amount
    
            ^PAYEVNTEMP52 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:UnusedAnnualOrLongServiceLeavePayment:LumpSumPaymentA:Remuneration.UnusedAnnualOrLongServiceLeavePaymentLumpSumA.Amount
    
            ^PAYEVNTEMP54 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:UnusedAnnualOrLongServiceLeavePayment:Remuneration.UnusedAnnualOrLongServiceLeavePaymentLumpSumB.Amount
    
            ^PAYEVNTEMP55 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:UnusedAnnualOrLongServiceLeavePayment:Remuneration.UnusedAnnualOrLongServiceLeavePaymentLumpSumD.Amount
    
            ^PAYEVNTEMP56 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:UnusedAnnualOrLongServiceLeavePayment:Remuneration.UnusedAnnualOrLongServiceLeavePaymentLumpSumE.Amount
    
            ^PAYEVNTEMP57 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement:Remuneration.VoluntaryAgreementGross.Amount
    
            ^PAYEVNTEMP60 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IndividualNonBusiness:Remuneration.IndividualNonBusinessCommunityDevelopmentEmploymentProject.Amount
    
            ^PAYEVNTEMP62 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:Allowance:Remuneration.IndividualNonBusinessEmploymentAllowances.Amount
    
            ^PAYEVNTEMP87 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:Deduction:Remuneration.Deduction.Amount
    
            ^PAYEVNTEMP111 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:SuperannuationContribution:SuperannuationContribution.EmployerReportable.Amount
    
            ^PAYEVNTEMP112 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:PaymentToForeignResident:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP113 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:JointPetroleumDevelopmentAreaPayment:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP114 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:LabourHireArrangementPayment:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP115 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP116 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:SpecifiedByRegulationPayment:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP117 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:EmploymentTerminationPayment:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP119 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:PaymentToForeignResident:Remuneration.PaymentToForeignResidentGross.Amount
    
            ^PAYEVNTEMP120 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:JointPetroleumDevelopmentAreaPayment:Remuneration.JointPetroleumDevelopmentAreaPayment.Amount
    
            ^PAYEVNTEMP122 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:SpecifiedByRegulationPayment:Remuneration.SpecifiedByRegulationPaymentGross.Amount
    
            ^PAYEVNTEMP125 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IncomeFringeBenefitsReportable:Taxable:Income.FringeBenefitsReportable.Amount
    
            ^PAYEVNTEMP126 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IncomeFringeBenefitsReportable:Exempt:Income.FringeBenefitsReportable.Amount
    
            ^PAYEVNTEMP130 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:IndividualNonBusiness:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP132 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:JointPetroleumDevelopmentAreaPayment:IncomeTax.ForeignWithholding.Amount
    
            ^PAYEVNTEMP200 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:WorkingHolidayMaker:Remuneration.WorkingHolidayMakerGross.Amount
    
            ^PAYEVNTEMP201 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:WorkingHolidayMaker:IncomeTax.PayAsYouGoWithholding.TaxWithheld.Amount
    
            ^PAYEVNTEMP217 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:VoluntaryAgreement
    
            ^PAYEVNTEMP237 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:PaymentToForeignResident:IncomeTax.ForeignWithholding.Amount
            */
            assertion = (report.PAYEVNTEMP13 == null && ((report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_AllowanceCollection == null ? false : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_AllowanceCollection.Any(PAYEVNTEMP62Repeat => PAYEVNTEMP62Repeat.PAYEVNTEMP62.GetValueOrDefault() > 0)) == true || (report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection == null ? false : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_DeductionCollection.Any(PAYEVNTEMP87Repeat => PAYEVNTEMP87Repeat.PAYEVNTEMP87.GetValueOrDefault() > 0)) == true || report.PAYEVNTEMP111.GetValueOrDefault() > 0 && (Count(report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_VoluntaryAgreementCollectionCount) == 0 || report.PAYEVNTEMP57 == 0 && report.PAYEVNTEMP115 == 0) || report.PAYEVNTEMP52.GetValueOrDefault() > 0 || report.PAYEVNTEMP54.GetValueOrDefault() > 0 || report.PAYEVNTEMP55.GetValueOrDefault() > 0 || report.PAYEVNTEMP56.GetValueOrDefault() > 0 || report.PAYEVNTEMP125.GetValueOrDefault() > 0 || report.PAYEVNTEMP126.GetValueOrDefault() > 0 || report.PAYEVNTEMP122.GetValueOrDefault() > 0 || report.PAYEVNTEMP116.GetValueOrDefault() > 0 || report.PAYEVNTEMP120.GetValueOrDefault() > 0 || report.PAYEVNTEMP132.GetValueOrDefault() > 0 || report.PAYEVNTEMP113.GetValueOrDefault() > 0 || report.PAYEVNTEMP200.GetValueOrDefault() > 0 || report.PAYEVNTEMP201.GetValueOrDefault() > 0 || report.PAYEVNTEMP47.GetValueOrDefault() > 0 || report.PAYEVNTEMP60.GetValueOrDefault() > 0 || report.PAYEVNTEMP130.GetValueOrDefault() > 0 || report.PAYEVNTEMP49.GetValueOrDefault() > 0 || report.PAYEVNTEMP48.GetValueOrDefault() > 0 || report.PAYEVNTEMP114.GetValueOrDefault() > 0 || report.PAYEVNTEMP237.GetValueOrDefault() > 0 || report.PAYEVNTEMP112.GetValueOrDefault() > 0 || report.PAYEVNTEMP119.GetValueOrDefault() > 0 || (report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection == null ? false : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection.Any(PAYEVNTEMP50Repeat => PAYEVNTEMP50Repeat.PAYEVNTEMP50.GetValueOrDefault() > 0)) == true || (report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection == null ? false : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection.Any(PAYEVNTEMP51Repeat => PAYEVNTEMP51Repeat.PAYEVNTEMP51.GetValueOrDefault() > 0)) == true || (report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection == null ? false : report.Payee_RemunerationIncomeTaxPayAsYouGoWithholding_EmploymentTerminationPaymentCollection.Any(PAYEVNTEMP117Repeat => PAYEVNTEMP117Repeat.PAYEVNTEMP117.GetValueOrDefault() > 0)) == true));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000176",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Payee TFN must be supplied",
                    LongDescription = @"Payee TFN must be supplied if at least one of the following amounts are provided in the Allowance Item or Deduction Item or Wage and Taxation Item excluding those in the Voluntary Agreement Payment Summary or if Reportable Employer Super contribution (RESC) is provided when Voluntary Agreement Payment Summary amounts are not provided",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:Identifiers/tns:TaxFileNumberId",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000176" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP13", Value = GetValueOrEmpty(report.PAYEVNTEMP13) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP62", Value = "PAYEVNTEMP62" });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP87", Value = "PAYEVNTEMP87" });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP111", Value = GetValueOrEmpty(report.PAYEVNTEMP111) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP57", Value = GetValueOrEmpty(report.PAYEVNTEMP57) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP115", Value = GetValueOrEmpty(report.PAYEVNTEMP115) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP52", Value = GetValueOrEmpty(report.PAYEVNTEMP52) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP54", Value = GetValueOrEmpty(report.PAYEVNTEMP54) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP55", Value = GetValueOrEmpty(report.PAYEVNTEMP55) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP56", Value = GetValueOrEmpty(report.PAYEVNTEMP56) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP125", Value = GetValueOrEmpty(report.PAYEVNTEMP125) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP126", Value = GetValueOrEmpty(report.PAYEVNTEMP126) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP122", Value = GetValueOrEmpty(report.PAYEVNTEMP122) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP116", Value = GetValueOrEmpty(report.PAYEVNTEMP116) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP120", Value = GetValueOrEmpty(report.PAYEVNTEMP120) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP132", Value = GetValueOrEmpty(report.PAYEVNTEMP132) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP113", Value = GetValueOrEmpty(report.PAYEVNTEMP113) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP200", Value = GetValueOrEmpty(report.PAYEVNTEMP200) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP201", Value = GetValueOrEmpty(report.PAYEVNTEMP201) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP47", Value = GetValueOrEmpty(report.PAYEVNTEMP47) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP60", Value = GetValueOrEmpty(report.PAYEVNTEMP60) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP130", Value = GetValueOrEmpty(report.PAYEVNTEMP130) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP49", Value = GetValueOrEmpty(report.PAYEVNTEMP49) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP48", Value = GetValueOrEmpty(report.PAYEVNTEMP48) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP114", Value = GetValueOrEmpty(report.PAYEVNTEMP114) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP237", Value = GetValueOrEmpty(report.PAYEVNTEMP237) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP112", Value = GetValueOrEmpty(report.PAYEVNTEMP112) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP119", Value = GetValueOrEmpty(report.PAYEVNTEMP119) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP50", Value = "PAYEVNTEMP50" });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP51", Value = "PAYEVNTEMP51" });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP117", Value = "PAYEVNTEMP117" });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000176

            #region VR.ATO.PAYEVNTEMP.000182

            /*  VR.ATO.PAYEVNTEMP.000182
            Either a Super Liability Amount or OTE Amount must be supplied.
    
            Legacy Rule Format:
            (^PAYEVNTEMP84 = NULL AND ^PAYEVNTEMP61 = NULL)

            Technical Business Rule Format:
            ^PAYEVNTEMP84 = NULL AND ^PAYEVNTEMP61 = NULL
    
            Data Elements:
    
            ^PAYEVNTEMP84 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:SuperannuationContribution:SuperannuationContribution.EmployerContributionsSuperannuationGuarantee.Amount
    
            ^PAYEVNTEMP61 = PAYEVNTEMP:Payee:RemunerationIncomeTaxPayAsYouGoWithholding:SuperannuationContribution:Remuneration.OrdinaryTimeEarnings.Amount
            */
            assertion = (report.PAYEVNTEMP84 == null && report.PAYEVNTEMP61 == null);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000182",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Either a Super Liability Amount or OTE Amount must be supplied",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:RemunerationIncomeTaxPayAsYouGoWithholding/tns:SuperannuationContribution/tns:EmployerContributionsSuperannuationGuaranteeA",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000182" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP84", Value = GetValueOrEmpty(report.PAYEVNTEMP84) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP61", Value = GetValueOrEmpty(report.PAYEVNTEMP61) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000182

            #region VR.ATO.PAYEVNTEMP.000183

            /*  VR.ATO.PAYEVNTEMP.000183
            When Payee Day of Birth, Payee Month of Birth and Payee Year of Birth are supplied, it must be a valid date.
    
            Legacy Rule Format:
            (^PAYEVNTEMP205 <> NULL AND ^PAYEVNTEMP203 <> NULL AND ^PAYEVNTEMP204 <> NULL AND (IsDate(ConvertToDate(^PAYEVNTEMP205, ^PAYEVNTEMP203, ^PAYEVNTEMP204)) = 'FALSE' ))

            Technical Business Rule Format:
            (^PAYEVNTEMP205 <> NULL AND ^PAYEVNTEMP203 <> NULL AND ^PAYEVNTEMP204 <> NULL AND (IsDate(ConvertToDate(^PAYEVNTEMP205, ^PAYEVNTEMP203, ^PAYEVNTEMP204)) = 'FALSE' ))
    
            Data Elements:
    
            ^PAYEVNTEMP205 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.DayofMonth
    
            ^PAYEVNTEMP203 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.Month
    
            ^PAYEVNTEMP204 = PAYEVNTEMP:Payee:PersonDemographicDetails:PersonDemographicDetails.Birth.Year
            */
            assertion = (report.PAYEVNTEMP205 != null && report.PAYEVNTEMP203 != null && report.PAYEVNTEMP204 != null && IsDate(ConvertToDate(report.PAYEVNTEMP205.GetValueOrDefault(), report.PAYEVNTEMP203.GetValueOrDefault(), report.PAYEVNTEMP204.GetValueOrDefault())) == false);
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.PAYEVNTEMP.000169",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Date of birth is invalid",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:PersonDemographicDetails/tns:BirthDm",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000183" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP205", Value = GetValueOrEmpty(report.PAYEVNTEMP205) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP203", Value = GetValueOrEmpty(report.PAYEVNTEMP203) });

                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP204", Value = GetValueOrEmpty(report.PAYEVNTEMP204) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000183

            #region VR.ATO.PAYEVNTEMP.000184

            /*  VR.ATO.PAYEVNTEMP.000184
            A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * - = _ ' . ? / or a space character
    
            Legacy Rule Format:
            ((^PAYEVNTEMP21 <> NULLORBLANK) AND (NotCharacterInSet(^PAYEVNTEMP21, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))

            Technical Business Rule Format:
            ((^PAYEVNTEMP21 <> BLANK) AND (NotCharacterInSet(^PAYEVNTEMP21, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))
    
            Data Elements:
    
            ^PAYEVNTEMP21 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Line1.Text
            */
            assertion = (string.IsNullOrWhiteSpace(report.PAYEVNTEMP21) != true && !(IsMatch(report.PAYEVNTEMP21, @"^[a-zA-Z0-9!@\$%&\*\(\)\-=\[\];:'"",\.\?/ ]*$", RegexOptions.IgnoreCase)));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.500026",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Address Line 1 contains invalid text",
                    LongDescription = @"A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * ( ) - = [ ] ; : ' "" , . ? / or a space character",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:Line1T",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000184" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP21", Value = report.PAYEVNTEMP21 });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000184

            #region VR.ATO.PAYEVNTEMP.000185

            /*  VR.ATO.PAYEVNTEMP.000185
            A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * - = _ ' . ? / or a space character
    
            Legacy Rule Format:
            ((^PAYEVNTEMP22 <> NULLORBLANK) AND (NotCharacterInSet(^PAYEVNTEMP22, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))

            Technical Business Rule Format:
            ((^PAYEVNTEMP22 <> BLANK) AND (NotCharacterInSet(^PAYEVNTEMP22, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))
    
            Data Elements:
    
            ^PAYEVNTEMP22 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.Line2.Text
            */
            assertion = (string.IsNullOrWhiteSpace(report.PAYEVNTEMP22) != true && !(IsMatch(report.PAYEVNTEMP22, @"^[a-zA-Z0-9!@\$%&\*\(\)\-=\[\];:'"",\.\?/ ]*$", RegexOptions.IgnoreCase)));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.500027",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Address Line 2 contains invalid text",
                    LongDescription = @"A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * ( ) - = [ ] ; : ' "" , . ? / or a space character",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:Line2T",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000185" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP22", Value = GetValueOrEmpty(report.PAYEVNTEMP22) });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000185

            #region VR.ATO.PAYEVNTEMP.000186

            /*  VR.ATO.PAYEVNTEMP.000186
            A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * - = _ ' . ? / or a space character
    
            Legacy Rule Format:
            ((^PAYEVNTEMP23 <> NULLORBLANK) AND (NotCharacterInSet(^PAYEVNTEMP23, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))

            Technical Business Rule Format:
            ((^PAYEVNTEMP23 <> BLANK) AND (NotCharacterInSet(^PAYEVNTEMP23, '"a-z","A-Z","0-9","!","@","$","%","&","*","(",")","-","=","[","]",";",":","'",""",",",".","?","/"," "')))
    
            Data Elements:
    
            ^PAYEVNTEMP23 = PAYEVNTEMP:Payee:AddressDetails:AddressDetails.LocalityName.Text
            */
            assertion = (string.IsNullOrWhiteSpace(report.PAYEVNTEMP23) != true && !(IsMatch(report.PAYEVNTEMP23, @"^[a-zA-Z0-9!@\$%&\*\(\)\-=\[\];:'"",\.\?/ ]*$", RegexOptions.IgnoreCase)));
            if (assertion)
            {
                processMessage = new ProcessMessageDocument()
                {
                    Code = "CMN.ATO.GEN.500028",
                    Severity = ProcessMessageSeverity.Error,
                    Description = @"Suburb/Town/City contains invalid text",
                    LongDescription = @"A text character must be one of the following: A to Z a to z 0 to 9 ! @ $ % & * ( ) - = [ ] ; : ' "" , . ? / or a space character",
                    Location = "/tns:PAYEVNTEMP/tns:Payee/tns:AddressDetails/tns:LocalityNameT",
                    Parameters = new ProcessMessageParameters() { new ProcessMessageParameter() { Name = "RuleIdentifier", Value = "VR.ATO.PAYEVNTEMP.000186" } },
                };
                processMessage.Parameters.Add(new ProcessMessageParameter
                { Name = "PAYEVNTEMP23", Value = report.PAYEVNTEMP23 });

                response.Add(processMessage);
            }
            #endregion // VR.ATO.PAYEVNTEMP.000186

            foreach (ProcessMessageDocument currentProcessMessage in response)
            {
                if (currentProcessMessage.Parameters != null)
                {
                    foreach (ProcessMessageParameter currentParameter in currentProcessMessage.Parameters)
                    {
                        if (string.IsNullOrEmpty(currentParameter.Name))
                        {
                            currentParameter.Name = _emptyParameterValue;
                        }

                        if (currentParameter.Name.Length > _maxParameterNameLength)
                        {
                            currentParameter.Name = currentParameter.Name.Substring(0, _maxParameterNameLength - 1);
                        }

                        if (string.IsNullOrEmpty(currentParameter.Value))
                        {
                            currentParameter.Value = _emptyParameterValue;
                        }

                        if (currentParameter.Value.Length > _maxParameterValueLength)
                        {
                            currentParameter.Value = currentParameter.Value.Substring(0, _maxParameterValueLength - 1);
                        }
                    }
                }
            }

            return response;
        }
        
    }
}